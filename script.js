

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ dictionary
function loadWords() {
    let index = Math.floor(Math.random() * words.length);
    return words[index];
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å

function speakWord(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    speechSynthesis.speak(utterance);
}

let numbers = 0;

// –ü–æ–∫–∞–∑ —Å–ª–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
function displayWords() {
    const sentences = document.getElementById("sentences");
    const placeForText = document.getElementById("placeForSentence");
    numbers = +prompt("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤")
    let dictionary = JSON.parse(localStorage.getItem("dictionary")) || []

    

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if (isNaN(numbers) || numbers <= 0) {
        alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");
        return;
    }

    if (numbers > 7) {
        alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7");
        return;
    }

    if (numbers > dictionary.length) {
        alert (`–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ ${dictionary.length} —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ!`)
        return
    }

    // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let displayForSentence = document.getElementById("displayForSentence");

    if (!displayForSentence) {
        displayForSentence = document.createElement("div");
        displayForSentence.id = "displayForSentence";
        displayForSentence.classList.add("frame");
        sentences.insertBefore(displayForSentence, placeForText);
    } else {
        displayForSentence.innerHTML = "";
    }

    let randomWords = [];

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ª–æ–≤–∞
    for (let i = 1; i <= numbers; i++) {

        const result = loadWords();
        randomWords.push(result);

    }

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ 

    function random () {
        randomWords.forEach(word => {
        const itemOfWords = document.createElement("div")
        itemOfWords.classList.add("itemOfWords-default")
        
        const button = document.createElement("button");
        button.textContent = "üîä"
        button.classList.add("voiceBtn")

        const text = document.createElement("p");
        text.textContent = word.word;
        text.title = word.translation;
        text.classList.add("word");

        const translate = document.createElement("input")
        translate.placeholder = "–ü–µ—Ä–µ–≤–æ–¥"
        translate.classList.add("translate")

        function triggerAnimation(element, className) {
            element.classList.remove(className);
            void element.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
            element.classList.add(className);
        }

        function correctAnswer () {
            triggerAnimation(translate, "correctly");
            const correctAnswer = document.createElement("p")
            correctAnswer.classList.add("answer");
            correctAnswer.textContent = word.translation;
    
            if (translate) {
                itemOfWords.removeChild(translate)
            }

            itemOfWords.appendChild(correctAnswer)
    
            itemOfWords.classList.toggle("itemOfWords-correct")
            itemOfWords.classList.toggle("itemOfWords-default")
        }

        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤

        let count = 0;

        function checkTranslation() {

            if (count === 2) {
                correctAnswer()                
            }

            if (translate.value.trim() === "") {
                return;
            }
            
            if (translate.value.trim().toLowerCase() === word.translation) {
                correctAnswer()
            } else {
                triggerAnimation(translate, "wrong")
            }

            count += 1;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞–∂–∞—Ç–∏—è –≤–Ω–µ input

        translate.addEventListener("blur", (value) => {
            checkTranslation()
        })

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ enter

        translate.addEventListener("keydown", (event) => {
            
            if (event.key === "Enter") {
                checkTranslation()
            }


                
        })

        button.addEventListener("click", () => {
            speakWord(word.word)
        })

        displayForSentence.appendChild(itemOfWords)
        itemOfWords.appendChild(button);        
        itemOfWords.appendChild(text);
        itemOfWords.appendChild(translate)
    })
}

random()




// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let updateButton = document.getElementById("buttonUpdateWords");

if (!updateButton) {
    updateButton = document.createElement("button");
    updateButton.textContent = "–û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞";
    updateButton.id = "buttonUpdateWords";
    sentences.appendChild(updateButton);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    updateButton.addEventListener("click", () => {
        displayForSentence.innerHTML = "";
        randomWords = [];
        for (let i = 1; i <= numbers; i++) {
            const result = loadWords();
            randomWords.push(result);

        }
        random()
        document.getElementById("inputText").value = "";
    });

    
}

// –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ textarea

let cleanWords = document.getElementById("cleanWords")

if (!cleanWords) {
    cleanWords = document.createElement("button")
    cleanWords.textContent = "–û—á–∏—Å—Ç–∏—Ç—å"
    cleanWords.id = "cleanWords"
    cleanWords.classList.add("cleanButtons")
    cleanWords.addEventListener("click", () => {
        document.getElementById("inputText").value = "";
    })
    sentences.appendChild(cleanWords)
}}


// –û–±—Ä–∞–±–æ—Ç—á–∫–∏ —Å–æ–±—ã—Ç—ã–π –Ω–∞ –∫–Ω–æ–ø–∫—É –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤

const showWords = document.getElementById("showWords")

if (showWords) {
    showWords.addEventListener("click", displayWords)
}


// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º–æ–≤

function loadIdioms () {
    let index = Math.floor(Math.random() * idioms.length)
    return idioms[index];
}


// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º–æ–≤

function displayIdiom() {

    const button = document.getElementById("showIdiom");
    if (!button) return
    
    const displayForIdiom = document.getElementById("displayForIdiom")
    const placeForIdiom = document.getElementById("placeForIdiom")

    button.addEventListener("click", () => {
        let displayForIdiom = document.getElementById("displayForIdiom")

        if (!displayForIdiom) {
            displayForIdiom = document.createElement("div")
            displayForIdiom.id = "displayForIdiom"
            idiom.insertBefore(displayForIdiom, placeForIdiom)
        } else {
            displayForIdiom.innerHTML = ""
        }

        const result = loadIdioms();
        

        const itemIdiom = document.createElement("p")
        itemIdiom.innerHTML = `<strong>–ò–¥–∏–æ–º–∞:</strong> ${result.idiom}`

        const itemTranslate = document.createElement("p")
        itemTranslate.innerHTML = `<strong>–ü–µ—Ä–µ–≤–æ–¥:</strong> ${result.translate}`

        const itemMeaning = document.createElement("p")
        itemMeaning.innerHTML = `<strong>–ó–Ω–∞—á–µ–Ω–∏–µ:</strong> ${result.meaning}`

        const itemExample = document.createElement("p")
        itemExample.innerHTML = `<strong>–ü—Ä–∏–º–µ—Ä:</strong> ${result.example}`

        const itemExampleTranslate = document.createElement("p")
        itemExampleTranslate.innerHTML = `<strong>–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞:</strong> ${result.exampleTranslate}` 


        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ textarea

        let cleanIdioms = document.getElementById("cleanIdioms")
        if (!cleanIdioms) {
            cleanIdioms = document.createElement("button")
            cleanIdioms.textContent = "–û—á–∏—Å—Ç–∏—Ç—å"
            cleanIdioms.classList.add("cleanButtons")
            cleanIdioms.id = "cleanIdioms"
            cleanIdioms.addEventListener("click", () => {
                document.getElementById("inputText2").value = "";
            })
            document.getElementById("idiom").appendChild(cleanIdioms)
        }
        


        displayForIdiom.appendChild(itemIdiom)
        displayForIdiom.appendChild(itemTranslate)
        displayForIdiom.appendChild(itemMeaning)
        displayForIdiom.appendChild(itemExample)
        displayForIdiom.appendChild(itemExampleTranslate)
        

        })
    }

displayIdiom()




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é
document.getElementById("showHide").addEventListener("click", () => {
    document.body.classList.toggle("body-hide");
    document.body.classList.toggle("body-show");
    document.getElementById("aside").classList.toggle("aside-hide");
    document.getElementById("aside").classList.toggle("aside-show");
});



// –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤

const showVerb = document.getElementById("showVerb")
const verbs = document.getElementById("verbs")


function loadVerbs () {
    let index = Math.floor(Math.random() * irregularVerbs.length)
    return irregularVerbs[index];
}

function displayVerbs () {


    function triggerAnimation(element, className) {
        element.classList.remove(className);
        void element.offsetWidth; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
        element.classList.add(className);
    }

    function correctAnswer (input, key) {
        
        let p = document.createElement("p")
        p.textContent = result[key];
        p.className = key
        div.insertBefore(p, input)
        input.replaceWith(p)

    }

    function trueOrFalse (input, key) {

        if (input.dataset.checked) return;

        if (input.value.trim() === "") {
            return
        }

        if (input.value.trim().toLowerCase() === result[key].toLowerCase()) {
            input.dataset.checked = "true"
            correctAnswer(input, key)
            } else {
            triggerAnimation(input, "wrong")
        }


    }

    const result = loadVerbs();
    

    let div = document.querySelector(".screenVerb")

    if (!div) {
        div = document.createElement("div")
        div.className = "screenVerb"
        verbs.insertBefore(div, showVerb)
    }    

    div.innerHTML = "";
    
    let p = document.createElement("p")
    p.textContent = result.translation;
    div.appendChild(p)
    p.className = "translation"
    p.title = result.base

    let base = document.createElement("input")
    div.appendChild(base)
    base.className = "base-default"

    let past = document.createElement("input")
    div.appendChild(past)
    past.className = "past-default"

    let participle = document.createElement("input")
    div.appendChild(participle)
    participle.className = "participle-default";

    let helpButton = document.getElementById("help")

    if (!helpButton) {
        helpButton = document.createElement("button")
        helpButton.id = "help"
        helpButton.className = "helpButton"
        helpButton.textContent = "–ù–µ –∑–Ω–∞—é"
        verbs.appendChild(helpButton)
    }

    helpButton.addEventListener("click", () => {
        if (!div.querySelector(".base")) {
            correctAnswer(base, "base")  
        }

        if (!div.querySelector(".past")) {
            correctAnswer(past, "past")  
        }

        if (!div.querySelector(".participle")) {
            correctAnswer(participle, "participle")  
        } 
    })


    base.addEventListener("blur", () => {
        trueOrFalse(base, "base")
    })

    base.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
            trueOrFalse(base, "base")
        }
    })


    past.addEventListener("blur", () => {
        trueOrFalse(past, "past")
    })

    past.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
            trueOrFalse(past, "past")
        }
    })



    participle.addEventListener("blur", () => {
        trueOrFalse(participle, "participle")
    })

    participle.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
            trueOrFalse(participle, "participle")
        }
    })

}




if (showVerb) {
    showVerb.addEventListener ("click", () => {
        displayVerbs()
    })
}



function sections() {
    const turnSentences = document.getElementById("turnSentences")
    const turnIdioms = document.getElementById("turnIdioms")
    const turnVerbs = document.getElementById("turnVerbs")
    const sentences = document.getElementById("sentences")
    const idiom = document.getElementById("idiom")
    const verbs = document.getElementById("verbs")
    
    
    
    turnSentences.addEventListener("click", () => {
        sentences.classList.toggle("hidden")
        turnSentences.classList.toggle ("chosen")
    })

    turnIdioms.addEventListener("click", () => {
        idiom.classList.toggle("hidden")
        turnIdioms.classList.toggle ("chosen")
    })

    turnVerbs.addEventListener("click", () => {
        verbs.classList.toggle("hidden")
        turnVerbs.classList.toggle ("chosen")
    })
}


sections()


